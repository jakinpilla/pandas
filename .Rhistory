library(tidyverse)
# 1-1) 단순회귀분석 수행하고 그 결과를 간단히 해석
head(mtcars)
mtcars_lm_1 <- lm(mpg ~ wt, data = mtcars)
summary(mtcars_lm_1)
-----------
# 1-1) 단순회귀분석 수행하고 그 결과를 간단히 해석
head(mtcars)
# 차량의 무게(wt)와 주행거리(mpg)와의 관계에 대한 단순 선형 회귀분석을 수행한 결과
#
# (회귀계수의 유의성 검정(t 검정) ) wt의 회귀계수 β1β1 (-5.3445)의 경우, p-value = 1.29e-10 < 0.05이므로 통계적으로 유의함
# (결정계수 해석) 결정계수(Adjusted R2R2)의 값이 0.74인데, 이는 이 선형회귀모델이 데이터를 약 74% 설명하고 있다고 할 수 있음
# (모형의 유의성 검정) F-검정 통계량의 p-value = 1.294e-10 < 0.05 이므로 이 선형회귀모델은 통계적으로 유의한 모델이라고 할 수 있음
-----------
# 1-2) 다중 선형 회귀분석을 수행하고, 그 결과를 간단히 해석
mtcars_lm_2 <- lm(mpg ~ wt + hp, data = mtcars)
summary(mtcars_lm_2)
# 차량의 무게(wt)와 주행거리(mpg)와의 관계에 대한 단순 선형 회귀분석을 수행한 결과
#
# (회귀계수의 유의성 검정(t 검정) ) wt의 회귀계수 β1β1 (-5.3445)의 경우, p-value = 1.29e-10 < 0.05이므로 통계적으로 유의함
# (결정계수 해석) 결정계수(Adjusted R2R2)의 값이 0.74인데, 이는 이 선형회귀모델이 데이터를 약 74% 설명하고 있다고 할 수 있음
# (모형의 유의성 검정) F-검정 통계량의 p-value = 1.294e-10 < 0.05 이므로 이 선형회귀모델은 통계적으로 유의한 모델이라고 할 수 있음
-----------
# 1-2) 다중 선형 회귀분석을 수행하고, 그 결과를 간단히 해석
mtcars_lm_2 <- lm(mpg ~ wt + hp, data = mtcars)
# 1-2) 다중 선형 회귀분석을 수행하고, 그 결과를 간단히 해석
mtcars_lm_2 <- lm(mpg ~ wt + hp, data = mtcars)
# 1-2) 다중 선형 회귀분석을 수행하고, 그 결과를 간단히 해석
mtcars_lm_2 <- lm(mpg ~ wt + hp, data = mtcars)
# 1-2) 다중 선형 회귀분석을 수행하고, 그 결과를 간단히 해석
mtcars_lm_2 <- lm(mpg ~ wt + hp, data = mtcars)
summary(mtcars_lm_2)
# 1-3) 1)과 2) 모형 중 어느 모형이 더 유의적인지 ANOVA을 이용하여 검정
anova(mtcars_lm_1, mtcars_lm_2)
head(mtcars)
mtcars_lm_1 <- lm(mpg ~ wt, data = mtcars)
summary(mtcars_lm_1)
# 1-2) 다중 선형 회귀분석을 수행하고, 그 결과를 간단히 해석
mtcars_lm_2 <- lm(mpg ~ wt + hp, data = mtcars)
summary(mtcars_lm_2)
# 1-3) 1)과 2) 모형 중 어느 모형이 더 유의적인지 ANOVA을 이용하여 검정
anova(mtcars_lm_1, mtcars_lm_2)
mtcars_lm_3 <- lm(scale(mpg) ~ scale(wt) + scale(hp), data = mtcars)
summary(mtcars_lm_3)
mtcars_lm_3 <- lm(scale(mpg) ~ scale(wt) + scale(hp), data = mtcars)
summary(mtcars_lm_3)
# 1-5) 2) 모형의 잔차그림을 그리고 특정한 패턴이 있는지 확인, 그리고 교호작용을 고려한 모형을 적합 후 그 분석결과에 대해 잔차그림을 그려 특정한 패턴이 존재하는지 확인
plot(mtcars_lm_2, which = 1)
mtcars_lm_4 <- lm(mpg ~ wt*hp, data = mtcars)
summary(mtcars_lm_4)
plot(mtcars_lm_4, which=1)
newdata <- data.frame(wt = 3.5, hp = 170)
predict(mtcars_lm_2, newdata, interval="prediction", level = 0.90)
read.csv("gas_price.csv")
read.csv("gas_prices.csv")
getwd()
read.csv("gas_prices.csv")
read.csv("gas_prices.csv")
library(tidyverse)
pgfull <- read.delim("~/pgfull.txt")
View(pgfull)
head(pgfull)
pgfull[, 1:54]
pgfull_1 <- pgfull[, 1:54]
str(pgfull)
summary(pgfull)
dim(pgfull)
dim(pgfull_1)
pgfull_1.pca <- prcomp(pgfull_1, center = T, scale.=T)
pgfull_1.pca
plot(pgfull_1.pca, type = 'l')
## scree plot에 의거 k = 6 으로 선택
summary(pgfull_1.pca)
install.packages("devtools")
library(devtools)
install_github("ggbiplot", "vqv")
library(ggbiplot)
g <- ggbiplot(pgfull_1.pca, obs.scale = 1, var.scale = 1,
groups = pgfull_1.species, ellipse = T,
circle = T)
head(pgfull)
pgfull.species <- pgfull[, 57]
pgfull.species
type(pgfull.species)
asfactor(pgfull.species)
as.factor(pgfull.species)
pgfull.species <- as.factor(pgfull.species)
g <- ggbiplot(pgfull_1.pca, obs.scale = 1, var.scale = 1,
groups = pgfull_1.species, ellipse = T,
circle = T)
g <- ggbiplot(pgfull_1.pca, obs.scale = 1, var.scale = 1,
groups = pgfull.species, ellipse = T,
circle = T)
g <- g + scale_color_dicrete(name = "")
g <- g + scale_color_discrete(name = "")
g <- g + theme(legend.direction = "horizontal",
legend.position = "top")
print(g)
head(pgfull_1)
pgfull_1.scaled <- scale(pgfull_1)
head(pgfull_1.scaled)
pgfull_1.scaled <- scale(pgfull_1)
pgfull.species
wssplot <- function(data, nc = 15, seed = 1234) {
wss <- (nrow(data) - 1) * sum(apply(data, 2, var))
for (i in 2:nc) {
set.seed(seed)
wss[i] <- sum(kmeans(data, centers = i)$withinss)}
plot(1:nc, wss, type = "b",
xlab = "Number of Clusters",
ylab = "Within Groups Sum of Squares") }
wssplot(pgfull_1.scaled, nc = 10)
wssplot(pgfull_1.scaled, nc = 15)
wssplot <- function(data, nc = 40, seed = 1234) {
wss <- (nrow(data) - 1) * sum(apply(data, 2, var))
for (i in 2:nc) {
set.seed(seed)
wss[i] <- sum(kmeans(data, centers = i)$withinss)}
plot(1:nc, wss, type = "b",
xlab = "Number of Clusters",
ylab = "Within Groups Sum of Squares") }
wssplot(pgfull_1.scaled, nc = 30)
wssplot(pgfull_1.scaled, nc = 35)
wssplot(pgfull_1.scaled, nc = 40)
wssplot(pgfull_1.scaled, nc = 15)
wssplot(pgfull_1.scaled, nc = 6)
pgfull_1.kmeans <- kmeans(pgfull_1.scaled, 3)
pgfull_1.kmeans$centers
pgfull_1.kmeans$cluster
gas_prices <- read.csv("gas_prices.csv")
head(gas_prices)
# 필요한 데이터만 선택
dim(gas_prices)
gas_prices[, c(14, 15)]
gas_prices_1 <- gas_prices[, c(14, 15)]
str(gas_prices_1)
m <- lm(average ~ index, data = gas_prices_1)
summary(m)
summary(gas_prices_1)
str(gas_prices_1)
m <- lm(average ~ index, data = gas_prices_1)
summary(m)
resids <- rstandard(m)
shapiro.test(resids)
plot(m, which = 2)
# 14.
# part a)
set.seed(1)
x1 = runif(100)
x2 = .5*x1 + rnorm(100)/10
y = 2 + 2*x1 + .3*x2 + rnorm(100)
# part g)
summary(x1)
summary(x2)
x1 = c(x1, .1)
x2 = c(x2, .8)
y = c(y, 6)
par(mfrow=c(2,2))
lm.fit4 = lm(y ~ x1 + x2)
summary(lm.fit4)
windows()
plot(lm.fit4)
par(mfrow=c(2,2))
plot(lm.fit4)
lm.fit5 = lm(y ~ x1)
summary(lm.fit5)
plot(lm.fit5)
lm.fit6 = lm(y ~ x2)
summary(lm.fit6)
plot(lm.fit6)
# part a)
data(Boston)
# part a)
library(ISLR)
data(Boston)
library(MASS)
data(Boston)
attach(Boston)
names(Boston)
str(Boston)
sim_beta_js = c()
names(Boston)[-1]
subset(Boston, select='zn')
t(subset(Boston, select='zn')_
t(subset(Boston, select='zn'))
c(t(subset(Boston, select='zn')))
sim_beta_js = c()
for (name in names(Boston)[-1]) {
predictor = c(t(subset(Boston, select = name)))
lm.fit = lm(crim ~ predictor)
sim_beta_js <- c(sim_beta_js, coef(lm.fit)[2])
print(paste('Runnning simple linear regression : ', name))
print(summary(lm.fit))
}
lm.fit = lm(crim~., data=Boston)
summary(lm.fit)
# part c)
# Results in (b) have much more predictors which are not statistically significant
# comparing to the reult in (a)
sim_beta_js
coef(lm.fit)
coef(lm.fit)[-1]
plot(sim_beta_js, coef(lm.fit)[-1])
par(mfrow=c(1,1))
plot(sim_beta_js, coef(lm.fit)[-1])
# part c)
# Results in (b) have much more predictors which are not statistically significant
# comparing to the reult in (a)
sim_beta_js # :: univariate regression coefficients
names(Boston)
which.max(sim_beta_js)
names(Boston)[which.max(sim_beta_js) + 1]
coef(lm.fit)[which.max(sim_beta_js) + 1]
max(sim_beta_js)
for (name in names(Boston)[-1]){
predictor = c(t(subset(Boston, select=name)))
lm.fit = lm(crim ~ predictor + I(predictor^2) + I(predictor^3)) # adding non-linearity
print(paste('Running simple linear regression on:', name))
print(summary(lm.fit))
}
range(cust_prod_total_freq_15_amt_100$amt)
# setwd('C:/Users/gonybella/Desktop/프로젝트 공유/호준_data_수정/최종수정/새 폴더')
getwd()
rm()
rm(list=ls())
gc()
# cust_prod_total_fix_2 변수 가진 cust_prod_total.RData 로딩
load("cust_prod_total.RData")
library(readxl)
library(plyr)
library(tidyverse)
library(reshape)
library(reshape2)
library(data.table)
# cust_prod_total_fix_2 변수 가진 cust_prod_total.RData 로딩
load("cust_prod_total.RData")
# cust_prod_total_fix_2 변수 가진 cust_prod_total.RData 로딩
load("cust_prod_total.RData")
### 수정된 고객 마스터 데이터
load("cust_prod_total_fin.RData")
python
insatll.packages("reticulate")
install.packages("reticulate")
library(reticulate)
insatll.packages("reticulate")
os <- import("os")
os$listdir(.)
os$listdir(".")
repl_python()
import pandas as pd
import numpy as np
from os import getcwd, chdir
wd = getcwd()
wd
chdir("C:/Users/Daniel/pandas")
getcwd()
movie = pd.read_csv("./data/movie.csv")
movie.info()
data = movie.values
data
index
issubclass(pd.RangeIndex, pd.Index)
movie.dtypes
movie.get_dtype_counts()
movie['director_name']
movie.director_name
type(movie['director_name'])
director = movie['director_name']
director.name
director.to_flame()
director.to_frame()
s_attr_methods = set(dir(pd.Series))
len(s_attr_methods)
df_attr_methods = set(dir(pd.DataFrame))
len(df_attr_methods)
len(s_attr_methods & df_attr_methods)
movie
movie.head()
movie.colnames()
movie.names()
pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)
len(s_attr_methods & df_attr_methods)
movie.head()
director = movie['director_name']
director.name
director.to_frame()
s_attr_methods = set(dir(pd.Series))
len(s_attr_methods)
df_attr_methods = set(dir(pd.DataFrame))
len(df_attr_methods)
len(s_attr_methods & df_attr_methods)
movie.head()
pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.max_rows', 50)
pd.set_option('display.max_columns', 50)
pd.set_option('display.width', 100)
movie.head()
director = movie['director_name']
actor_1_fb_likes= movie['actor_1_facebook_likes']
actor_1_fb_likes
director.head()
actor_1_fb_likes.head()
director.value_counts()
actor_1_fb_likes.value_counts()
director.size
director.shape
len(director)
director.count() # not counting "nan"
system("python C:/Users/Daniel/Desktop/repl_python_prac.py")
system("python C:/Users/Daniel/Desktop/repl_python_prac.py")
system("python C:/Users/Daniel/Desktop/repl_python_prac.py")
system("python C:/Users/Daniel/Desktop/repl_python_prac.py")
system("python C:/Users/Daniel/Desktop/repl_python_prac.py")
system("python C:/Users/Daniel/Desktop/repl_python_prac.py")
system("python C:/Users/Daniel/Desktop/repl_python_prac.py")
library(reticulate)
os <- import("os")
os$listdir(".")
repl_python()
repl_python()
import numpy as np
import pandas as pd
pd.set_option('display.max_rows', 50)
pd.set_option('display.max_columns', 50)
pd.set_option('display.width', 100)
from os import getcwd, chdir
wd = getcwd()
wd
chdir("C:/Users/Daniel/pandas")
getcwd()
movie = pd.read_csv("./data/movie.csv")
movie.info()
data = movie.values
issubclass(pd.RangeIndex, pd.Index)
movie.dtypes
movie.get_dtype_counts()
movie['director_name']
movie.director_name
len(director)
chdir("C:/Users/Daniel/pandas")
getcwd()
movie = pd.read_csv("./data/movie.csv")
movie.info()
data = movie.values
issubclass(pd.RangeIndex, pd.Index)
movie.dtypes
movie.get_dtype_counts()
movie['director_name']
movie.director_name
type(movie['director_name'])
director = movie['director_name']
director.name
director.to_frame()
s_attr_methods = set(dir(pd.Series))
len(s_attr_methods)
df_attr_methods = set(dir(pd.DataFrame))
len(df_attr_methods)
len(s_attr_methods & df_attr_methods)
movie.head()
director = movie['director_name']
actor_1_fb_likes= movie['actor_1_facebook_likes']
director.head()
actor_1_fb_likes.head()
director.value_counts()
actor_1_fb_likes.value_counts()
director.size
director.shape
len(director)
director.count() # not counting "nan"
actor
